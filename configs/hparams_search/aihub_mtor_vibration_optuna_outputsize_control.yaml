# @package _global_

# example hyperparameter optimization of some experiment with Optuna:
# python train.py -m hparams_search=mnist_optuna experiment=example

defaults:
  - override /hydra/sweeper: optuna

# choose metric which will be optimized by Optuna
# make sure this is the correct name of some metric logged in lightning module!
optimized_metric: "val/acc_best"

# here we define Optuna hyperparameter search
# it optimizes for value returned from function with @hydra.main decorator
# docs: https://hydra.cc/docs/next/plugins/optuna_sweeper
hydra:
  mode: "MULTIRUN" # set hydra to multirun by default if this config is attached

  sweeper:
    _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper

    # storage URL to persist optimization results
    # for example, you can use SQLite if you set 'sqlite:///example.db'
    storage: null

    # name of the study to persist optimization results
    study_name: null

    # number of parallel workers
    n_jobs: 1

    # 'minimize' or 'maximize' the objective
    direction: maximize

    # total number of runs that will be executed
    n_trials: 50

    # choose Optuna hyperparameter sampler
    # you can choose bayesian sampler (tpe), random search (without optimization), grid sampler, and others
    # docs: https://optuna.readthedocs.io/en/stable/reference/samplers.html
    sampler:
      _target_: optuna.samplers.TPESampler
      seed: 25
      n_startup_trials: 15  # number of random sampling runs before optimization starts

    # define hyperparameter search space
    params:
      model.optimizer.lr: interval(0.001, 0.05)
      model.net.use_raw : choice(True, False)
      model.net.use_bandpass : False
      model.net.use_bandpass_fft : False
      model.net.use_stat : False
      model.net.use_fft_stat : True
      model.net.use_eofft: True
      model.net.use_envelope: choice(True, False)
      model.net.use_envelope_spectrum: choice(True, False)
      model.net.out_channel1_size: choice(64, 32, 16)
      model.net.out_channel2_size: choice(128, 64)
      model.net.out_channel3_size: choice(256, 128, 64)
      model.net.out_channel4_size: choice(32, 16, 8, 1)
      model.net.kernel1_size: choice(72, 64, 56, 48)
      model.net.kernel2_size: choice(36, 32, 28, 24)
      model.net.kernel3_size: choice(18, 16, 14)
      model.net.kernel4_size: choice(10, 8, 6, 4)
      model.net.lstm_hidden_size: 128
      model.net.dense1_out_size : 256
      model.net.dense2_out_size : 64
      model.net.output_size : choice(8, 5)
      model.net.topk_freq : choice(9, 10, 11, 12)
      model.net.discriminator_dense1_outsize : 64
      model.net.discriminator_dense2_outsize : 16